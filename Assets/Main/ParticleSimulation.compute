#include "Common.cginc"

RWStructuredBuffer<float4> AllParticles_Position;
RWStructuredBuffer<float4> AllParticles_Velocity;

int AllParticles_Length;

RWStructuredBuffer<uint> HashCodeToSortedParticleIndexes;

RWStructuredBuffer<uint> SortedParticleIndexes;




uint ComparisonOffset;
uint DirectionChangeStride;

// help from https://github.com/hiroakioishi/UnityGPUBitonicSort/blob/master/GPUBitonicSort/Assets/BitonicSortCS/BitonicSort.compute
// explained at https://en.wikipedia.org/wiki/Bitonic_sorter and https://www.geeksforgeeks.org/bitonic-sort/
#pragma kernel BitonicSort
[numthreads(64, 1, 1)]
void BitonicSort(uint3 id : SV_DispatchThreadID)
{
    // int index0 = (id.x & (ComparisonOffset-1)) + (id.x & ~(ComparisonOffset-1)) << 1;
	// int index1 = index0 + ComparisonOffset;    
    // int key0 = GetHashCode(AllParticles_Position[index0]);
    // int key1 = GetHashCode(AllParticles_Position[index1]);
    // bool shouldSwap = (key0 <= key1) == (bool)(DirectionChangeStride & index0);

	//uint result = ((shared_data[id.x & ~ComparisonOffset] <= shared_data[id.x | ComparisonOffset]) == (bool)(DirectionChangeStride & id.x)) ? shared_data[id.x ^ ComparisonOffset] : shared_data[id.x];

    int index0 = id.x & ~ComparisonOffset; // index top
	int index1 = id.x | ComparisonOffset; // index bottom
    if (index1 == id.x) return;
    
    uint hashcode0 = GetHashCode(AllParticles_Position[SortedParticleIndexes[index0]].xyz);
    uint hashcode1 = GetHashCode(AllParticles_Position[SortedParticleIndexes[index1]].xyz);
    bool shouldSwap = (hashcode0 <= hashcode1) == (bool)(DirectionChangeStride & index0);

    if (shouldSwap)
    {
        uint temp = SortedParticleIndexes[index0];
        SortedParticleIndexes[index0] = SortedParticleIndexes[index1];
        SortedParticleIndexes[index1] = temp;
    }
}




#pragma kernel HashCodeToSortedParticleIndexes_Initialize
[numthreads(64, 1, 1)]
void HashCodeToSortedParticleIndexes_Initialize(uint3 id : SV_DispatchThreadID)
{  
    HashCodeToSortedParticleIndexes[id.x * 2 + 0] = 0xFFFFFFFF; // particle start index, max uint
    HashCodeToSortedParticleIndexes[id.x * 2 + 1] = 0; // num particles   
}




#pragma kernel HashCodeToSortedParticleIndexes_Bin
[numthreads(64, 1, 1)]
void HashCodeToSortedParticleIndexes_Bin(uint3 id : SV_DispatchThreadID)
{  
    uint index = id.x;
    uint hashcode = GetHashCode(AllParticles_Position[SortedParticleIndexes[index]].xyz);

    InterlockedMin(HashCodeToSortedParticleIndexes[hashcode * 2 + 0], index); // particle start index
    InterlockedAdd(HashCodeToSortedParticleIndexes[hashcode * 2 + 1], 1); // num particles    
}




float ParticleRadius;

float3 RayStartWorldPos;
float3 RayDirection;

RWStructuredBuffer<int> HitResults;

float2 RaySphereIntersect(float3 r0, float3 rd, float3 s0, float sr)
{
    float a = dot(rd, rd);
    float3 s0_r0 = r0 - s0;
    float b = 2.0 * dot(rd, s0_r0);
    float c = dot(s0_r0, s0_r0) - (sr * sr);
	float disc = b * b - 4.0 * a * c;
    if (disc < 0.0)
    {
        // no hit
        return float2(-1.0, -1.0);
    }
    else
    {
		return float2(-b - sqrt(disc), -b + sqrt(disc)) / (2.0 * a);
	}
}

#pragma kernel RaycastHitParticles
[numthreads(512, 1, 1)]
void RaycastHitParticles(uint3 id : SV_DispatchThreadID)
{  
    float3 particleWorldPos = AllParticles_Position[id.x].xyz;
    float2 hitResult = RaySphereIntersect(RayStartWorldPos, RayDirection, particleWorldPos, ParticleRadius);
    if (hitResult.x == -1 || hitResult.y == -1) return;

    int originalCount;
    InterlockedAdd(HitResults[0], 1, originalCount);

    HitResults[(originalCount + 1) * 4 + 0] = id.x;
    HitResults[(originalCount + 1) * 4 + 1] = round(particleWorldPos.x * 1000);
    HitResults[(originalCount + 1) * 4 + 2] = round(particleWorldPos.y * 1000);
    HitResults[(originalCount + 1) * 4 + 3] = round(particleWorldPos.z * 1000);
}




float DeltaTime;
int DragParticleIndex;
float3 DragTargetWorldPosition;

#pragma kernel Simulate_AdjustVelocity
[numthreads(64, 1, 1)]
void Simulate_AdjustVelocity(uint3 id : SV_DispatchThreadID)
{
    uint thisParticleIndex = id.x;
    float3 thisParticlePosition = AllParticles_Position[thisParticleIndex].xyz;
    
    uint hashcodes[27];
    {
        int i = 0;
        for (int x = -1; x <= 1; x++)
            for (int y = -1; y <= 1; y++)
                for (int z = -1; z <= 1; z++)
                {
                    hashcodes[i] = GetHashCode(thisParticlePosition + int3(x,y,z) * VoxelCellEdgeSize);
                    i++;
                }
    }

    float3 thisParticleForce = 0;
    int countOfOtherParticlesInRange = 0;

    for (int h = 0; h < 27; h++)
    {
        uint voxelCellFirstParticleIndex = HashCodeToSortedParticleIndexes[hashcodes[h] * 2 + 0]; 
        uint voxelCellTotalNumParticles = HashCodeToSortedParticleIndexes[hashcodes[h] * 2 + 1]; 

        uint otherParticleHashcodeIndex = voxelCellFirstParticleIndex;
        for (uint p = 0; p < voxelCellTotalNumParticles; p++)
        {
            uint otherParticleIndex = SortedParticleIndexes[otherParticleHashcodeIndex];
            if (otherParticleIndex != thisParticleIndex)
            {
                float3 otherParticlePosition = AllParticles_Position[otherParticleIndex].xyz;
                float3 direction = thisParticlePosition - otherParticlePosition;
                float len = length(direction);
                const float interactionMaxRadius = 0.2;
                if (len <= interactionMaxRadius)
                {
                    thisParticleForce += direction / len * 30 * (1.0 - min(1.0, len / interactionMaxRadius));
                    countOfOtherParticlesInRange++;
                }
            }
            otherParticleHashcodeIndex++;
        }
    }

    if (thisParticleIndex == DragParticleIndex)
    {
        float3 direction = DragTargetWorldPosition - thisParticlePosition;
        float len = length(direction);
        thisParticleForce += direction / len * 5;             
    }

    float3 thisParticleVelocity = AllParticles_Velocity[thisParticleIndex].xyz;
    
    thisParticleForce.y -= 20 * DeltaTime;

    thisParticleVelocity += thisParticleForce * DeltaTime;

    // clamp to 2D xy plane
    thisParticleVelocity.z = 0;    
    thisParticlePosition.z = 0;
    
    float wallDamp = 0.9f;
    // simulate walls
    if (thisParticlePosition.x < 0) 
        thisParticleVelocity.x = abs(thisParticleVelocity.x) * wallDamp;
    if (thisParticlePosition.x > 20) 
        thisParticleVelocity.x = -abs(thisParticleVelocity.x) * wallDamp;
    if (thisParticlePosition.y < 0) 
        thisParticleVelocity.y = abs(thisParticleVelocity.y) * wallDamp;
    if (thisParticlePosition.y > 20) 
        thisParticleVelocity.y = -abs(thisParticleVelocity.y) * wallDamp;
    if (thisParticlePosition.z < -1) 
        thisParticleVelocity.z = abs(thisParticleVelocity.z) * wallDamp;
    if (thisParticlePosition.z > 2) 
        thisParticleVelocity.z = -abs(thisParticleVelocity.z) * wallDamp;

    float damping = (1 - DeltaTime * 0.2f);
    thisParticleVelocity *= damping;

    AllParticles_Velocity[thisParticleIndex] = float4(thisParticleVelocity, countOfOtherParticlesInRange);
}

#pragma kernel Simulate_AdjustPosition
[numthreads(64, 1, 1)]
void Simulate_AdjustPosition(uint3 id : SV_DispatchThreadID)
{
    uint thisParticleIndex = id.x;
    float3 thisParticlePosition = AllParticles_Position[thisParticleIndex].xyz;
    
    AllParticles_Position[thisParticleIndex].xyz = thisParticlePosition + AllParticles_Velocity[thisParticleIndex].xyz * DeltaTime;
}