#pragma exclude_renderers d3d11_9x
#pragma exclude_renderers d3d9

#include "MatrixQuaternion.cginc"




#include "AtomStruct.cginc"

int AllHalfBonds_Length;
RWStructuredBuffer<HalfBond> AllHalfBonds;
StructuredBuffer<HalfBond> AllHalfBonds_Read;

int AllAtoms_Length;
RWStructuredBuffer<Atom> AllAtoms;
StructuredBuffer<Atom> AllAtoms_Read;








float2x3 from_deriv(float3 dij, float sc)
{
	float2x3 Dij;
	float xx_  = dij.x*dij.x;
	float yy_  = dij.y*dij.y;
	float zz_  = dij.z*dij.z;
	Dij._m12=-dij.x*dij.y;
	Dij._m11=-dij.x*dij.z;
	Dij._m10=-dij.y*dij.z;
	Dij._m00=(yy_+zz_)   ;
	Dij._m01=(xx_+zz_)   ;
	Dij._m02=(xx_+yy_)   ;
	Dij._m02 *= sc;
	return Dij;
}

float3 dot_to(float2x3 Dij, float3 v)
{
	return float3(
		dot(Dij._m00_m12_m11, v),
		dot(Dij._m12_m01_m10, v),
		dot(Dij._m11_m10_m02, v)
	);
}

float2 finite_exp(float x, float beta, float Rcut)
{
    // Approximation of exp(-beta*x) with finite cutoff for x in [0,Rcut]
    // x ... distance
    // fr ... force output
    // beta ... decay constant (rate of decay of exponential)
    // Rcut ... cutoff radius
    // exp(-beta*x) for x in [0,Rcut]
    // y  = (1-C*x)^17 * (1-B*x)^2 
    // dy = (1-C x)^16   (1-B*x)    (-2 B - 17 C + 19 B C x)
    //printf( " x %g x/Rcut %g Rcut %g ", x, x/Rcut, Rcut );
    const int k=17;
    const float RN  = Rcut*0.5*k;
    const float cor = 1.15/RN; 
    const float C   = beta/k - cor;
    const float B   = 1/Rcut; 
    float y1 = 1-x*C; 
    float y  = y1*y1;  // ^2
    y=y*y; // ^4
    y=y*y; // ^8
    y=y*y; // ^16
    float ycut = 1-x*B;
    y*=ycut;
    float fr = y* ( -2*B - k*C + (k+2)*B*C*x );
    y*=ycut;
    return float2(y*y1, fr);
}

float4 d_rot_exact(float4 quaternion, float dt, float3 omega)
{
    float r2   = dot(omega, omega);
    if(r2>0){
        float norm = sqrt( r2 );
        float a    = dt * norm * 0.5;
        float sa   = sin( a )/norm;  // we normalize it here to save multiplications
        float ca   = cos( a );
        omega *= sa; // hat * sin(a)
        return float4(
             omega.x*quaternion.w + omega.y*quaternion.z - omega.z*quaternion.y + ca*quaternion.x,
            -omega.x*quaternion.z + omega.y*quaternion.w + omega.z*quaternion.x + ca*quaternion.y,
             omega.x*quaternion.y - omega.y*quaternion.x + omega.z*quaternion.w + ca*quaternion.z,
            -omega.x*quaternion.x - omega.y*quaternion.y - omega.z*quaternion.z + ca*quaternion.w
        );
    }

    return quaternion;
};













int BoundingPlanes_Length;
StructuredBuffer<float4> BoundingPlanes_NormalDistance;


float AtomRadius;
float AtomInteractionMaxRadius;

RWStructuredBuffer<int> HashCodeToSortedAtomIndexes;

RWStructuredBuffer<uint2> SortedAtomIndexes;

bool ClampTo2D;



int HashCodeToSortedAtomIndexes_Length;
bool UseZCurveHashCode;


// https://www.shadertoy.com/view/4sscDn
// https://www.forceflow.be/2013/10/07/morton-encodingdecoding-through-bit-interleaving-implementations/
uint splitBy3(uint a)
{
    uint x = a & 0x1fffff; // we only look at the first 21 bits
    //x = (x | x << 32) & 0x1f00000000ffff; // shift left 32 bits, OR with self, and 00011111000000000000000000000000000000001111111111111111
    x = (x | (x << 16)) & 0xff0000ff; // shift left 32 bits, OR with self, and 00011111000000000000000011111111000000000000000011111111
    x = (x | (x << 8)) & 0x0f00f00f; // shift left 32 bits, OR with self, and 0001000000001111000000001111000000001111000000001111000000000000
    x = (x | (x << 4)) & 0xc30c30c3; // shift left 32 bits, OR with self, and 0001000011000011000011000011000011000011000011000011000100000000
    x = (x | (x << 2)) & 0x49249249;
    return x;
}

uint GetHashCode_ZCurve(float3 position)
{
    uint3 p = abs((int3)(position / AtomInteractionMaxRadius) + 128);
    return (splitBy3(p.x) | (splitBy3(p.y) << 1) | (splitBy3(p.z) << 2)) % HashCodeToSortedAtomIndexes_Length;
}

uint GetHashCode_Simple(float3 position)
{
    uint3 p = abs((int3)(position / AtomInteractionMaxRadius) + 128);
    return (p.x + (p.y << 8) + (p.z << 16)) % HashCodeToSortedAtomIndexes_Length;
}

uint GetHashCode(float3 position)
{
    if (UseZCurveHashCode)
        return GetHashCode_ZCurve(position);
    else
        return GetHashCode_Simple(position);
}




#pragma kernel BitonicSort_Initialize
[numthreads(128, 1, 1)]
void BitonicSort_Initialize(uint3 id : SV_DispatchThreadID)
{
    SortedAtomIndexes[id.x] = uint2(id.x, GetHashCode(AllAtoms[id.x].position.xyz));
}



uint ComparisonOffset;
uint DirectionChangeStride;

// help from https://github.com/hiroakioishi/UnityGPUBitonicSort/blob/master/GPUBitonicSort/Assets/BitonicSortCS/BitonicSort.compute
// explained at https://en.wikipedia.org/wiki/Bitonic_sorter and https://www.geeksforgeeks.org/bitonic-sort/
#pragma kernel BitonicSort_Sort
[numthreads(128, 1, 1)]
void BitonicSort_Sort(uint3 id : SV_DispatchThreadID)
{
    int index0 = id.x & ~ComparisonOffset; // index top
	int index1 = id.x | ComparisonOffset; // index bottom
    if (index1 == id.x) return;
    
    uint hashcode0 = SortedAtomIndexes[index0].y;
    uint hashcode1 = SortedAtomIndexes[index1].y;
    bool shouldSwap = (hashcode0 <= hashcode1) == (bool)(DirectionChangeStride & index0);

    if (shouldSwap)
    {
        uint2 temp = SortedAtomIndexes[index0];
        SortedAtomIndexes[index0] = SortedAtomIndexes[index1];
        SortedAtomIndexes[index1] = temp;
    }
}

// Optimization: instead of dispatching multiple kernels with small comparionOffsets
// we can use many comparionOffsets in one kernel if the comparionOffsets is small enough and all relevant data can fit into shared memory
#define BITONIC_BLOCK_SIZE 128
groupshared uint2 GroupSharedData[BITONIC_BLOCK_SIZE];
#pragma kernel BitonicSort_Sort_GroupShared
[numthreads(BITONIC_BLOCK_SIZE, 1, 1)]
void BitonicSort_Sort_GroupShared(uint3 Gid  : SV_GroupID, 
				 uint3 DTid : SV_DispatchThreadID, 
				 uint3 GTid : SV_GroupThreadID, 
				 uint  GI   : SV_GroupIndex)
{
    // Load shared data
	GroupSharedData[GI] = SortedAtomIndexes[DTid.x];
	GroupMemoryBarrierWithGroupSync();

	// Sort the shared data
	for (uint comparisonOffset = ComparisonOffset; comparisonOffset > 0; comparisonOffset >>= 1)
	{
        uint hashcode0 = GroupSharedData[GI & ~comparisonOffset].y;
        uint hashcode1 = GroupSharedData[GI | comparisonOffset].y;
		uint2 result = 
            ((hashcode0 <= hashcode1) == (bool)(DirectionChangeStride & DTid.x)) ? 
            GroupSharedData[GI ^ comparisonOffset] : 
            GroupSharedData[GI];
		GroupMemoryBarrierWithGroupSync();
		GroupSharedData[GI] = result;
		GroupMemoryBarrierWithGroupSync();
	}

	// Store shared data
	SortedAtomIndexes[DTid.x] = GroupSharedData[GI];
}

#pragma kernel BitonicSort_ReorderData
[numthreads(128, 1, 1)]
void BitonicSort_ReorderData(uint3 dispatchThreadID : SV_DispatchThreadID)
{
    uint newIndex = dispatchThreadID.x;
    uint oldIndex = SortedAtomIndexes[newIndex].x;

    AllAtoms[newIndex] = AllAtoms_Read[oldIndex];
    for (int halfBondIndex; halfBondIndex < HALF_BOND_MAX_COUNT; halfBondIndex++)
    {
        AllHalfBonds[newIndex * HALF_BOND_MAX_COUNT + halfBondIndex] = AllHalfBonds_Read[oldIndex * HALF_BOND_MAX_COUNT + halfBondIndex];        
    }
}



#pragma kernel HashCodeToSortedAtomIndexes_Initialize
[numthreads(1024, 1, 1)]
void HashCodeToSortedAtomIndexes_Initialize(uint3 id : SV_DispatchThreadID)
{  
    HashCodeToSortedAtomIndexes[id.x * 2 + 0] = -1;
    HashCodeToSortedAtomIndexes[id.x * 2 + 1] = -1;
}

// idea from https://developer.download.nvidia.com/assets/cuda/files/atoms.pdf
#pragma kernel HashCodeToSortedAtomIndexes_Bin
[numthreads(128, 1, 1)]
void HashCodeToSortedAtomIndexes_Bin(uint3 id : SV_DispatchThreadID)
{  
    uint index1 = id.x + 0;
    uint index2 = id.x + 1;
    if (index2 >= AllAtoms_Length) return;

    uint hashcode1 = SortedAtomIndexes[index1].y;
    uint hashcode2 = SortedAtomIndexes[index2].y;

    if (hashcode1 != hashcode2)
    {
        HashCodeToSortedAtomIndexes[hashcode2 * 2 + 0] = index2; // atom start index
        HashCodeToSortedAtomIndexes[hashcode1 * 2 + 1] = index1; // atom end index
    }

    if (index1 == 0) // first atom
        HashCodeToSortedAtomIndexes[hashcode1 * 2 + 0] = index1; // atom start index
    if (index2 == AllAtoms_Length - 1) // last atom
        HashCodeToSortedAtomIndexes[hashcode2 * 2 + 1] = index2; // atom end index
}




float3 RayStartWorldPos;
float3 RayDirection;

RWStructuredBuffer<int> HitResults;

float2 RaySphereIntersect(float3 r0, float3 rd, float3 s0, float sr)
{
    float a = dot(rd, rd);
    float3 s0_r0 = r0 - s0;
    float b = 2.0 * dot(rd, s0_r0);
    float c = dot(s0_r0, s0_r0) - (sr * sr);
	float disc = b * b - 4.0 * a * c;
    if (disc < 0.0)
    {
        // no hit
        return float2(-1.0, -1.0);
    }
    else
    {
		return float2(-b - sqrt(disc), -b + sqrt(disc)) / (2.0 * a);
	}
}

#pragma kernel RaycastHitAtoms
[numthreads(128, 1, 1)]
void RaycastHitAtoms(uint3 id : SV_DispatchThreadID)
{  
    float3 atomWorldPos = AllAtoms[id.x].position;
    float2 hitResult = RaySphereIntersect(RayStartWorldPos, RayDirection, atomWorldPos, AtomRadius);
    if (hitResult.x == -1 || hitResult.y == -1) return;

    int originalCount;
    InterlockedAdd(HitResults[0], 1, originalCount);

    HitResults[(originalCount + 1) * 4 + 0] = id.x;
    HitResults[(originalCount + 1) * 4 + 1] = round(atomWorldPos.x * 1000);
    HitResults[(originalCount + 1) * 4 + 2] = round(atomWorldPos.y * 1000);
    HitResults[(originalCount + 1) * 4 + 3] = round(atomWorldPos.z * 1000);
}


#pragma kernel Simulate_Prepare
[numthreads(128, 1, 1)]
void Simulate_Prepare(uint3 id : SV_DispatchThreadID)
{
    uint atomIndex = id.x;

    // clear forces and energies
    {
        AllAtoms[atomIndex].force = 0;
        AllAtoms[atomIndex].torque = 0;
        for (int halfBondIndex; halfBondIndex < HALF_BOND_MAX_COUNT; halfBondIndex++)
        {
            AllHalfBonds[atomIndex * HALF_BOND_MAX_COUNT + halfBondIndex].force = 0;
            AllHalfBonds[atomIndex * HALF_BOND_MAX_COUNT + halfBondIndex].energy = 0;
        }
    }

    // cache data    
    {
        float3x3 localToWorldRotation = quaternion_to_matrix_3x3(AllAtoms[atomIndex].rotation);
        for (int halfBondIndex; halfBondIndex < HALF_BOND_MAX_COUNT; halfBondIndex++)
        {
            AllHalfBonds[atomIndex * HALF_BOND_MAX_COUNT + halfBondIndex].directionWorldSpace.xyz =
                mul(localToWorldRotation, AllHalfBonds[atomIndex * HALF_BOND_MAX_COUNT + halfBondIndex].directionLocalSpace.xyz);
        }
    }
}


int DragAtomIndex;
float3 DragTargetWorldPosition;
bool DataAlreadyOrdered;

groupshared float3 thisAtomForce_Change[32];
groupshared float3 thisAtomHalfBond_Force_Change[32 * HALF_BOND_MAX_COUNT];
groupshared float3 thisAtomHalfBond_Energy_Change[32 * HALF_BOND_MAX_COUNT];
#pragma kernel Simulate_EvaluateForces
[numthreads(27, 1, 1)]
void Simulate_EvaluateForces(
    uint3 dispatchThreadID : SV_DispatchThreadID, 
    uint3 groupId  : SV_GroupID,
    uint3 groupThreadID : SV_GroupThreadID)
{
    uint thisAtomIndex = groupId.x;
    uint cellLocalIndex = groupThreadID.x;
   
    thisAtomForce_Change[cellLocalIndex] = 0;
    for (int halfBondIndex; halfBondIndex < HALF_BOND_MAX_COUNT; halfBondIndex++)
    {
        thisAtomHalfBond_Force_Change[cellLocalIndex * HALF_BOND_MAX_COUNT + halfBondIndex] = 0;
        thisAtomHalfBond_Energy_Change[cellLocalIndex * HALF_BOND_MAX_COUNT + halfBondIndex] = 0;
    }

    GroupMemoryBarrierWithGroupSync();

    //if (cellLocalIndex >= 27) return;
    float3 thisAtomPosition = AllAtoms[thisAtomIndex].position;

    // calculate relevant voxel cells hashcodes
    uint cellHashCode;
    {
        int i = 0;
        for (int x = -1; x <= 1; x++)
            for (int y = -1; y <= 1; y++)
                for (int z = -1; z <= 1; z++)
                {
                    if (cellLocalIndex == i)
                        cellHashCode = GetHashCode(thisAtomPosition + float3(x,y,z) * AtomInteractionMaxRadius);
                    i++;
                }
    }

    int countOfInteractingAtoms = 0;

    uint sortedAtomsStartIndex = HashCodeToSortedAtomIndexes[cellHashCode * 2 + 0];
    uint sortedAtomsEndIndex = HashCodeToSortedAtomIndexes[cellHashCode * 2 + 1]; 
    
    Atom thisAtom = AllAtoms[thisAtomIndex];
    if (sortedAtomsEndIndex != -1 && sortedAtomsStartIndex != -1)
    {   
        for (uint sortedAtomsIndex = sortedAtomsStartIndex;
            sortedAtomsIndex <= sortedAtomsEndIndex; 
            sortedAtomsIndex++)
        {
            uint otherAtomIndex;
            if (DataAlreadyOrdered)
                otherAtomIndex = sortedAtomsIndex;
            else
                otherAtomIndex = SortedAtomIndexes[sortedAtomsIndex].x;

            if (otherAtomIndex != thisAtomIndex)
            {
                Atom otherAtom = AllAtoms[otherAtomIndex];

                // This is modified from RARFFarr
                const float RcutMax = 5.0; // [A]
                const float R2cut = RcutMax*RcutMax;
                const float RcutCap = 3.0; // [A]
                const float R2cutCap = RcutCap*RcutCap;
                const bool bRepelCaps = true;
                const bool bDonorAcceptorCap = false;
                const float lcap       =   1.0;
                const float aMorseCap  =   1.0;
                const float bMorseCap  =  -0.7;
                #define R2SAFE  1.0e-8f

                // subtract atom positions, check if within cutoff
                float3 dij = otherAtom.position - thisAtom.position;
                float r2 = dot(dij, dij);
                if (r2 > R2cut) continue; // cutoff
                float rij = sqrt(r2);
                float3 hij = dij*(1/rij);

                // mixing rules for L-J interaction  https://en.wikipedia.org/wiki/Combining_rules
                float combined_aMorse = thisAtom.aMorse * otherAtom.aMorse;
                float combined_bMorse = thisAtom.bMorse + otherAtom.bMorse;
                float combined_rbond0 = thisAtom.rbond0 + otherAtom.rbond0;
                float combined_Epz = thisAtom.Epz;
                
                // Evaluate **radial** Potential and Force
                // https://en.wikipedia.org/wiki/Morse_potential
                // potential composed frowm two exponetials
                // one is atractive decaying slowly, represeting electron which want to share two atoms (forming a bond)
                // the other is repulsive, decaying fast, representing electron which want to avoid having overlap which other electrons which already are near the atomic nuclei 
                // E  = a*( exp( -b*(r-r0) ) - 1 )^2
                //float expr = exp( -type.bMorse*(rij - type.rbond0); // original version
                float2 r  = finite_exp( rij - combined_rbond0, -combined_bMorse, RcutMax-combined_rbond0 );
                float expr = r.x;
                float dexpr = r.y;
                float E     =    combined_aMorse*expr* expr; // repuslive part of interaction
                float fr    =  2*combined_aMorse*expr*dexpr; // repulsive force
                float Eb    = -2*combined_aMorse*      expr; // bonding energy (attractive part of interactions)
                float frb   = -2*combined_aMorse*     dexpr; // bonding force
                float3 force = hij*fr;

                // =================== Evaluate angular part of potential (and force)

                // matrix derivative cosine(hi,hj) = 1/|hi||hj| d/dhi (hi.hj
                // in short - you give it direction, it gives you force
                // Evaluate angular derivative matrix
                float2x3 Dij = from_deriv(dij, 1/(rij*r2));

                // Interactions between all pairs of bonds on that atom 
                // all half-bonds on atom A
                for (
                    int thisAtomHalfBondIndex = thisAtomIndex * HALF_BOND_MAX_COUNT; 
                    thisAtomHalfBondIndex < thisAtomIndex * HALF_BOND_MAX_COUNT + thisAtom.numUsedHalfBonds; 
                    thisAtomHalfBondIndex++
                ) 
                {
                    const float3 hi = AllHalfBonds[thisAtomHalfBondIndex].directionWorldSpace;
                    float ci       = dot(hij, hi);   // ci = <hi|hij>

                    // we have 3 cosines of 3 anges
                    // ci  = cos(hi,hij)
                    // cj  = cos(hj,hij)
                    // cij = cos(hi,hj)
                    // where:
                    // hi ... direction of bond on atom i
                    // hj ... direction of bond on atom j
                    // hij ... direction of bond between atoms i and j (between centers of atoms)

                    if (ci < 0)       // cannot bond if in oposite direction (other half plane)
                        continue; 

                    bool capi = AllHalfBonds[thisAtomHalfBondIndex].cap >= 0; // if bond is capped it does not bond any more

                    // all half-bonds on atom B
                    for (
                        int otherAtomHalfBondIndex = otherAtomIndex * HALF_BOND_MAX_COUNT;
                        otherAtomHalfBondIndex < otherAtomIndex * HALF_BOND_MAX_COUNT + otherAtom.numUsedHalfBonds;
                        otherAtomHalfBondIndex++
                    )
                    {
                        const float3 hj = AllHalfBonds[otherAtomHalfBondIndex].directionWorldSpace;
                        // Interaction between capped (i.e. passivated) bonds - Only repulsive
                        // if( bDonorAcceptorCap && capi && AllHalfBonds[otherAtomHalfBondIndex].cap>=0) continue;
                        // // ---- repulsion of capping atoms on both bonds (i,j)
                        // if( bRepelCaps && capi && AllHalfBonds[otherAtomHalfBondIndex].cap>=0)
                        // {
                        //     float3 pi = thisAtom.position + hi*lcap;
                        //     float3 pj = otherAtom.position + hj*lcap;
                        //     float3  dij   = pi-pj;
                        //     float r2    = dot(dij, dij) + R2SAFE;
                        //     if( r2<R2cutCap ){ 
                        //         // Morse
                        //         float rij   = sqrt( r2 );
                        //         //float e     = aMorseCap * exp( bMorseCap*rij );
                        //         //float3  f     = dij * (-bMorseCap * e / rij);
                        //         //  ----- only the repulsive part of the Morse potential
                        //         float2 r     = aMorseCap * finite_exp( rij, -bMorseCap, RcutCap );   
                        //         float e = r.x;
                        //         float frc = r.y;
                        //         float3  f     = dij * (aMorseCap * frc / rij );     
                        //         E+=e;
                        //         force += f;
                        //         f *= 1.0/lcap;
                        //         if (saveToThis)
                        //             AllHalfBonds[thisAtomHalfBondIndex].force += f;
                        //         else
                        //             AllHalfBonds[otherAtomHalfBondIndex].force -= f;
                        //         continue;
                        //     }
                        // }

                        // ---- Here starts the actual angular enery evaluation for pair of half-bonds
                        // cosines of angles between the bonds
                        float cj       = dot(hij, hj);  // cj  = <hj|hij>
                        float cij      = dot(hi, hj);  // cij = <hj|hi>
                        if(cj>0||cij>0) continue;   // check if bonds oriented toward each other

                        // Angular potential     E =  (cos(ai)*cos(aj)*cos(aij)) ^ 4
                        float cc  = ci*cj*cij;
                        float cc2 = cc*cc;
                        float e   = cc2*cc2;   // Angular Energy 
                        float de  = 4*cc2*cc;  // Angular derivative

                        // Total energy of bond is product of radial and angular part
                        // this can be imaggined that atoms have to be ind proper distance (i.e. radial part)
                        // but also that the half-bonds have to be properly oriented (depends of cosises ci,cj,cij)
                        float eEb = e * Eb; // mutiply by radial bond energy
                        thisAtomHalfBond_Energy_Change[cellLocalIndex * HALF_BOND_MAX_COUNT + thisAtomHalfBondIndex] += eEb*0.5;
                        //AllHalfBonds[otherAtomHalfBondIndex].energy += eEb*0.5;
                        E      += eEb;

                        // Now we have to compute forces by derivative of total energy (eEb=e*Eb) 
                        // with respect to all input variables (degrees-of-freedom) using chain derivative rule
                        float deEb = de*Eb;
                        float cicj = ci*cj;
                        float cijcideEb = cij*ci*deEb; // temp variables for chain derivative rule to compute force from energy experssion
                        float cijcjdeEb = cij*cj*deEb;
                        float frbe = frb*e;
                        thisAtomHalfBond_Force_Change[cellLocalIndex * HALF_BOND_MAX_COUNT + thisAtomHalfBondIndex] += hij * (-cijcjdeEb); 
                        thisAtomHalfBond_Force_Change[cellLocalIndex * HALF_BOND_MAX_COUNT + thisAtomHalfBondIndex] += hj * (-cicj*deEb);        
                        //AllHalfBonds[otherAtomHalfBondIndex].force += hij * (-cijcideEb); 
                        //AllHalfBonds[otherAtomHalfBondIndex].force += hi * (-cicj*deEb);

                        float3 hv;
                        hv = dot_to(Dij, hi); 
                        force += hv * (cijcjdeEb);
                        hv = dot_to(Dij, hj); 
                        force += hv * (cijcideEb);

                        force += hij * (frb*e);
                    }
                }

                // pi-pi interactions ( trying to align pi-orbitals in aromatic molecules, planarize them )
                // for examplpe benzene molecule-molecule orbital
                if (thisAtom.numUsedHalfBonds == 3 && otherAtom.numUsedHalfBonds == 3)
                {
                    // align pz-pz in sp2-sp2 pair
                    const float3 hi = AllHalfBonds[thisAtomIndex * HALF_BOND_MAX_COUNT + 3].directionWorldSpace;
                    const float3 hj = AllHalfBonds[otherAtomIndex * HALF_BOND_MAX_COUNT + 3].directionWorldSpace;
                    float cdot = dot(hi, hj); // we try to make these to pi-orbitals collinear
                    //float E = Epz * ( cdot*cdot ); // why I do no save energy ?
                    float de = -2*cdot*combined_Epz*Eb;
                    thisAtomHalfBond_Force_Change[cellLocalIndex * HALF_BOND_MAX_COUNT + 3] += hj * de;
                    //AllHalfBonds[otherAtomIndex * HALF_BOND_MAX_COUNT + 3].force += hi * de;
                    //force      // TODO: proper derivatives of energy?
                }

                // Accumulate atomic forces
                thisAtomForce_Change[cellLocalIndex] += force;
                //AllAtoms[otherAtomIndex].force -= force;
            }
        }
    }

    GroupMemoryBarrierWithGroupSync();

    if (groupThreadID.x != 0) return;
    
    // sum reduce shared data
    {
        {
            float3 force = 0;
            for (int i = 0; i < 27; i++)
            {
                force += thisAtomForce_Change[i];
            }
            thisAtom.force.xyz = force;
        }

        for (int halfBondIndex; halfBondIndex < HALF_BOND_MAX_COUNT; halfBondIndex++)
        {
            float3 force = 0;
            float3 energy = 0;
            for (int i = 0; i < 27; i++)
            {
                force += thisAtomHalfBond_Force_Change[i * HALF_BOND_MAX_COUNT + halfBondIndex];
                energy += thisAtomHalfBond_Energy_Change[i * HALF_BOND_MAX_COUNT + halfBondIndex];
            }
            AllHalfBonds[thisAtomIndex * HALF_BOND_MAX_COUNT + halfBondIndex].force.xyz += force;
            AllHalfBonds[thisAtomIndex * HALF_BOND_MAX_COUNT + halfBondIndex].energy.xyz += energy;
        }
    }

    if (thisAtomIndex == DragAtomIndex)
    {
        float3 direction = DragTargetWorldPosition - thisAtomPosition;
        float len = length(direction);
        thisAtom.force.xyz += direction / len * clamp(0, 10, len * 10);             
    }    
 
    for (int index = 0; index < BoundingPlanes_Length; index++)
    {
        float4 plane = BoundingPlanes_NormalDistance[index];
        float distanceToPlane = dot(thisAtomPosition.xyz, plane.xyz) + plane.w - AtomRadius;
        if (distanceToPlane < 0)
        {
            thisAtom.force.xyz += plane.xyz * clamp(abs(distanceToPlane), 0, 1) * 100;
        }
    }

    thisAtom.force.xyz += float3(0, 0, 0);

    AllAtoms[thisAtomIndex] = thisAtom;
}


float DeltaTime;
#pragma kernel Simulate_Move
[numthreads(128, 1, 1)]
void Simulate_Move(uint3 id : SV_DispatchThreadID)
{
    uint atomIndex = id.x;

    float damp = 0.9;

    // evaluate torques
    for (int halfBondIndex; halfBondIndex < HALF_BOND_MAX_COUNT; halfBondIndex++)
    {
        float3 force = AllHalfBonds[atomIndex * HALF_BOND_MAX_COUNT + halfBondIndex].force;
        float3 direction = AllHalfBonds[atomIndex * HALF_BOND_MAX_COUNT + halfBondIndex].directionWorldSpace;
        force += direction * -dot(force, direction); // orthogonalize
        AllAtoms[atomIndex].torque.xyz += cross(direction, force);
    }

    const float invRotMass = 2.0;

    int4 clampTo2d = 1;
    if (ClampTo2D)
        clampTo2d = int4(1, 1, 0, 0);

    AllAtoms[atomIndex].velocity = (damp * AllAtoms[atomIndex].velocity + DeltaTime * AllAtoms[atomIndex].force) * clampTo2d;
    AllAtoms[atomIndex].omega = damp * AllAtoms[atomIndex].omega + (DeltaTime * invRotMass) * AllAtoms[atomIndex].torque;
    AllAtoms[atomIndex].position= (AllAtoms[atomIndex].position + AllAtoms[atomIndex].velocity * DeltaTime) * clampTo2d;
    AllAtoms[atomIndex].rotation = normalize(d_rot_exact(AllAtoms[atomIndex].rotation, DeltaTime, AllAtoms[atomIndex].omega));
}